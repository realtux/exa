"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[704],{9412:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"modules/database","title":"database","description":"the database module facilitates connecting exa.js to an external database. this module is a thin wrapper around the great and powerful sequelize.js project. the main purpose is to expose and configure models in a slightly more intutitive way.","source":"@site/docs/modules/database.md","sourceDirName":"modules","slug":"/modules/database","permalink":"/modules/database","draft":false,"unlisted":false,"editUrl":"https://github.com/realtux/exa/tree/master/docs/docs/modules/database.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"websockets","permalink":"/modules/websockets"},"next":{"title":"migrations","permalink":"/modules/migrations"}}');var n=t(4848),a=t(8453);const i={sidebar_position:4},r="database",l={},d=[{value:"anatomy of a model",id:"anatomy-of-a-model",level:2},{value:"table_name",id:"table_name",level:3},{value:"fields",id:"fields",level:3},{value:"associate",id:"associate",level:3},{value:"hooks",id:"hooks",level:3},{value:"options",id:"options",level:2},{value:"other methods",id:"other-methods",level:3},{value:"using a model",id:"using-a-model",level:2}];function c(e){const s={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"database",children:"database"})}),"\n",(0,n.jsxs)(s.p,{children:["the database module facilitates connecting exa.js to an external database. this module is a thin wrapper around the great and powerful ",(0,n.jsx)(s.a,{href:"https://sequelize.org/",children:"sequelize.js"})," project. the main purpose is to expose and configure models in a slightly more intutitive way."]}),"\n",(0,n.jsx)(s.h2,{id:"anatomy-of-a-model",children:"anatomy of a model"}),"\n",(0,n.jsxs)(s.p,{children:["each model represents a table in the database and is created in the ",(0,n.jsx)(s.code,{children:"models"})," directory. in this example, we'll create a new model to represent a ",(0,n.jsx)(s.code,{children:"users"})," table at ",(0,n.jsx)(s.code,{children:"models/users.js"}),". this example also references an ",(0,n.jsx)(s.code,{children:"orgs"})," model. you'll have to pretend that it exists for now."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-js",metastring:'title="models/users.js"',children:"import { Model, DataTypes } from '@exajs/core/system/sequelize';\nimport util from '#app/library/util.js';\n\nclass users extends Model {\n\n    static table_name = 'users'\n\n    static fields = {\n        user_id: {\n            type: DataTypes.INTEGER,\n            primaryKey: true,\n            autoIncrement: true\n        },\n        org_id: DataTypes.INTEGER,\n        name: DataTypes.STRING,\n        email: DataTypes.STRING,\n        content: DataTypes.DESCRIPTION,\n        created_at: DataTypes.DATE,\n    }\n\n    static associate(models) {\n        // associate users to orgs (orgs model must exist obviously)\n        models.users\n            .belongsTo(models.orgs, {\n                as: 'orgs',\n                foreignKey: 'org_id',\n            });\n    }\n\n    static hooks = {\n        async beforeCreate(instance) {\n            instance.created_at = util.now();\n        }\n    }\n\n    static options = {\n        // sequelize specific options\n    }\n\n    static model_method() {\n        // method available at users.model_method();\n    }\n\n}\n\nexport default users;\n"})}),"\n",(0,n.jsx)(s.h3,{id:"table_name",children:"table_name"}),"\n",(0,n.jsxs)(s.p,{children:["specify the name of the table here, pretty straight forward. this will be mapped onto ",(0,n.jsx)(s.code,{children:"options.modelName"})," for sequelize internally."]}),"\n",(0,n.jsx)(s.h3,{id:"fields",children:"fields"}),"\n",(0,n.jsxs)(s.p,{children:["defines all fields of a database and their associated types (",(0,n.jsx)(s.a,{href:"https://sequelize.org/docs/v6/core-concepts/model-basics/#data-types",children:"https://sequelize.org/docs/v6/core-concepts/model-basics/#data-types"}),"). this is necessary for proper mapping of mysql types to javascript types. this will be supplied directly to the sequelize ",(0,n.jsx)(s.code,{children:"model.init()"})," function."]}),"\n",(0,n.jsx)(s.h3,{id:"associate",children:"associate"}),"\n",(0,n.jsxs)(s.p,{children:["this is a function that will be called (if it exists) after all models have been initialized. the ",(0,n.jsx)(s.code,{children:"models"})," variable will be an object containing all initialized models from the ",(0,n.jsx)(s.code,{children:"models/*"})," directory. sequelize supports associations (",(0,n.jsx)(s.a,{href:"https://sequelize.org/docs/v6/core-concepts/assocs/",children:"https://sequelize.org/docs/v6/core-concepts/assocs/"}),") to perform eager loading in queries and this is a perfect place to organize these associations."]}),"\n",(0,n.jsxs)(s.p,{children:["note that although sequelize documents associations being as simple as ",(0,n.jsx)(s.code,{children:"A.belongsTo(B)"}),", in practice this only works when taking advantage of sequelize's conventions which sometimes have bad side effects. this module aims to remove these conventions in favor of more developer control."]}),"\n",(0,n.jsxs)(s.p,{children:["what this means is associations in exa.js will require the use of ",(0,n.jsx)(s.code,{children:"as"})," and ",(0,n.jsx)(s.code,{children:"foreignKey"})," almost always, since the alias and foreign key won't be inferred for you. although this is a little extra work, it removes to possibility of encountering convention related problems later."]}),"\n",(0,n.jsx)(s.h3,{id:"hooks",children:"hooks"}),"\n",(0,n.jsxs)(s.p,{children:["sequelize supports a number of lifecycle hooks (",(0,n.jsx)(s.a,{href:"https://sequelize.org/docs/v6/other-topics/hooks/",children:"https://sequelize.org/docs/v6/other-topics/hooks/"}),") that can be used to run code at various key points. this will be mapped onto ",(0,n.jsx)(s.code,{children:"options.hooks"})," for sequelize internally."]}),"\n",(0,n.jsx)(s.h2,{id:"options",children:"options"}),"\n",(0,n.jsx)(s.p,{children:"anything in this object is merged in with the model options for sequelize. this can be used to supply other options or configuration that isn't exposed with the exa.js wrapper."}),"\n",(0,n.jsx)(s.h3,{id:"other-methods",children:"other methods"}),"\n",(0,n.jsx)(s.p,{children:"any other static methods created in the model will also be available statically when including the model in your application."}),"\n",(0,n.jsx)(s.h2,{id:"using-a-model",children:"using a model"}),"\n",(0,n.jsxs)(s.p,{children:["so now you have a model, time to use it. say you wanted to create an http route to return all users. to do this, create an http file ",(0,n.jsx)(s.code,{children:"http/api/users.js"})]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-js",metastring:'title="http/api/users.js"',children:"import { models } from '@exajs/core/database';\n\nexport default new class {\n\n    routes = {\n        'get /api/users': 'all',\n    }\n\n    async all(req, res) {\n        let users = await models.users\n            .findAll();\n\n        return res\n            .status(200)\n            .send(users);\n    }\n\n};\n"})}),"\n",(0,n.jsx)(s.admonition,{title:"Tip",type:"tip",children:(0,n.jsxs)(s.p,{children:["models can also be imported directly such as ",(0,n.jsx)(s.code,{children:"import users from '#app/models/users.js';"}),". we find this unnecessarily reserves important variables (",(0,n.jsx)(s.code,{children:"users"})," in this case) and probably should be avoided, but know that it is an option."]})})]})}function h(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>r});var o=t(6540);const n={},a=o.createContext(n);function i(e){const s=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),o.createElement(a.Provider,{value:s},e.children)}}}]);