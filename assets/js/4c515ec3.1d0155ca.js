"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[842],{1675:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"getting-started/project-structure","title":"project structure","description":"this is an overview of each directory in the project and what it is for. this is also the directories present after initialization.","source":"@site/docs/getting-started/project-structure.md","sourceDirName":"getting-started","slug":"/getting-started/project-structure","permalink":"/exa/exa/getting-started/project-structure","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/getting-started/project-structure.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"quickstart","permalink":"/exa/exa/getting-started/quickstart"},"next":{"title":"docker","permalink":"/exa/exa/getting-started/docker"}}');var r=t(4848),n=t(8453);const o={sidebar_position:2},a="project structure",c={},d=[{value:"directories",id:"directories",level:2},{value:"config",id:"config",level:3},{value:"console",id:"console",level:3},{value:"http",id:"http",level:3},{value:"library",id:"library",level:3},{value:"middleware",id:"middleware",level:3},{value:"migrations",id:"migrations",level:3},{value:"models",id:"models",level:3},{value:"public",id:"public",level:3},{value:"var",id:"var",level:3},{value:"views",id:"views",level:3},{value:"websocket",id:"websocket",level:3}];function l(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"project-structure",children:"project structure"})}),"\n",(0,r.jsx)(i.p,{children:"this is an overview of each directory in the project and what it is for. this is also the directories present after initialization."}),"\n",(0,r.jsx)(i.h2,{id:"directories",children:"directories"}),"\n",(0,r.jsx)(i.h3,{id:"config",children:"config"}),"\n",(0,r.jsxs)(i.p,{children:["contains a ",(0,r.jsx)(i.code,{children:"master.js"})," configuration file. this is used for project level configuration. for environment level configuration, it's recommended to use a ",(0,r.jsx)(i.code,{children:".env"})," file in the root and transfer relevant env using ",(0,r.jsx)(i.code,{children:"process.env"})," in ",(0,r.jsx)(i.code,{children:"master.js"}),"."]}),"\n",(0,r.jsx)(i.h3,{id:"console",children:"console"}),"\n",(0,r.jsxs)(i.p,{children:["contains console scripts that can be invoked with ",(0,r.jsx)(i.code,{children:"npm run console <script name>"}),". see docs for proper format."]}),"\n",(0,r.jsx)(i.h3,{id:"http",children:"http"}),"\n",(0,r.jsx)(i.p,{children:"contains api logic organized in one or more files. each file contains route definitions, middleware, and handlers. see docs for proper format."}),"\n",(0,r.jsx)(i.h3,{id:"library",children:"library"}),"\n",(0,r.jsx)(i.p,{children:"contains user defined library files. this is generally relevant js files for your project that don't fit anywhere else."}),"\n",(0,r.jsx)(i.h3,{id:"middleware",children:"middleware"}),"\n",(0,r.jsx)(i.p,{children:"contains express.js compatible middleware. middleware is configured for use in api logic. see docs for proper format."}),"\n",(0,r.jsx)(i.h3,{id:"migrations",children:"migrations"}),"\n",(0,r.jsxs)(i.p,{children:["contains ",(0,r.jsx)(i.a,{href:"https://github.com/realtux/jmig",children:"jmig"})," compatible database migrations files. these are used to apply and rollback changes to a database. please see the jmig readme for usage specifics."]}),"\n",(0,r.jsx)(i.h3,{id:"models",children:"models"}),"\n",(0,r.jsxs)(i.p,{children:["contains sequelize.js compatible database model files. to use a different database orm, set ",(0,r.jsx)(i.code,{children:"database.use = false"})," in ",(0,r.jsx)(i.code,{children:"config/master.js"})," which will disable automatic initialization of the ",(0,r.jsx)(i.code,{children:"models"})," folder. see docs for proper format."]}),"\n",(0,r.jsx)(i.h3,{id:"public",children:"public"}),"\n",(0,r.jsxs)(i.p,{children:["contains publicly available static files. in development, this is served with ",(0,r.jsx)(i.code,{children:"express.static()"})," at base url ",(0,r.jsx)(i.code,{children:"/public"}),". in production, this should be served with a normal web server."]}),"\n",(0,r.jsx)(i.h3,{id:"var",children:"var"}),"\n",(0,r.jsx)(i.p,{children:"contains variable static data, use this to store files that aren't directly used in your project, such as docs, sql files, notes, etc."}),"\n",(0,r.jsx)(i.h3,{id:"views",children:"views"}),"\n",(0,r.jsxs)(i.p,{children:["contains view templates for traditional non-async frontends. use ",(0,r.jsx)(i.code,{children:"res.render(path, variables)"})," instead of ",(0,r.jsx)(i.code,{children:"res.send()"})," in your api logic."]}),"\n",(0,r.jsx)(i.h3,{id:"websocket",children:"websocket"}),"\n",(0,r.jsx)(i.p,{children:"contains files that represent websocket connection entrypoints. see docs for proper format."})]})}function h(e={}){const{wrapper:i}={...(0,n.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,i,t)=>{t.d(i,{R:()=>o,x:()=>a});var s=t(6540);const r={},n=s.createContext(r);function o(e){const i=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(n.Provider,{value:i},e.children)}}}]);